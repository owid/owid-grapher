#!/bin/bash
#
#  deploy-content
#
#  Bake content and deploy to Cloudflare Pages.
#

set -o errexit
set -o pipefail
set -o nounset

# Cloudflare Pages project name
PROJECT_NAME=owid

# URL of Cloudflare page
# branches would be deployed to https://[branch].$PROJECT_NAME.pages.dev/"
# BAKED_BASE_URL="https://$PROJECT_NAME.pages.dev"
# BAKED_BASE_URL="https://pages.owid.io"
BAKED_BASE_URL="https://ourworldindata.org"

deploy_content() {
    echo "--- Deploying content to Cloudflare"

    if [[ "$BRANCH" != "master" ]]; then
        echo "Error: You're not on the master branch. Exiting."
        exit 1
    fi

    # NOTE: in theory we could run lightning bake in parallel to regular bake and only lock `deploy_to_cloudflare`
    # right now lightning bake has to wait if there's a regular bake
    if [ -n "${LIGHTNING_GDOC_SLUGS:-}" ]; then
        bake_gdoc_posts "$LIGHTNING_GDOC_SLUGS"
    else
        bake_site
        sync_baked_data_to_r2
    fi

    create_dist
    deploy_to_cloudflare

    echo "--- Site deployed to $BAKED_BASE_URL"
}

sync_to_r2_rclone() {
    local target=$1
    echo "--- Syncing ${target}..."
    # sync based on modtime and size
    # rclone is 3x slower than using aws sync (unless we use `--size-only`, which has performance then, but doesn't compare modtime)
    # this won't be such a problem after we remove /uploads from the sync (syncing grapher/exports only takes 15s
    # with rclone, and 5s with aws)
    rclone sync live-data/bakedSite/${target} r2:owid-assets/${target} --checkers=64 --transfers=64
}

sync_to_r2_aws() {
    local target=$1
    echo "--- Syncing ${target}..."
    R2_ENDPOINT_URL=$(rclone config show r2 | grep endpoint | cut -d'=' -f2 | tr -d ' ')
    aws --profile r2 --endpoint-url "${R2_ENDPOINT_URL}" s3 sync live-data/bakedSite/${target} s3://owid-assets/${target} --acl public-read
}

sync_baked_data_to_r2() {
    echo '--- Sync baked data to R2'
    # Cloudflare Pages has limit of 20000 files
    # NOTE: aws is about 3x faster than rclone
    sync_to_r2_aws grapher/exports # 9203 files
    sync_to_r2_aws exports         # 3314 files
}

deploy_to_cloudflare() {
    (
        echo '--- Deploy to Cloudflare'
        # wrangler uses CLOUDFLARE_ACCOUNT_ID and CLOUDFLARE_API_TOKEN from owid-grapher/.env, see the token
        # at https://dash.cloudflare.com/profile/api-tokens
        # for branch-specific non-production deploys, use `--branch master`
        cd dist
        # trim \r, they remove previous logs in buildkite
        # NOTE: using `node_modules/.bin/wrangler` would be preferable, but the current wrangler version
        #   raises `Error: Cannot find module '/home/owid/dist/node_modules/wrangler-dist/cli.js'`
        #   Fix this when possible.
        env $(grep "^CLOUDFLARE" ../owid-grapher/.env | xargs -0) node_modules/wrangler/bin/wrangler.js pages deploy . --project-name "$PROJECT_NAME" 2>&1 | tr -d '\r'
    )
}

create_dist() {
    echo '--- Creating dist/ folder'
    # Define a list of excluded directories for rsync
    # grapher/exports/ should be removed once #4464 is merged and we've deleted the static exports folder
    EXCLUDES=(grapher/data/variables/ .git/ grapher/exports/ exports/ uploads/ assets-admin/)

    # Build rsync command with excluded directories
    RSYNC_COMMAND=("rsync" "-havzq" "--delete")
    for EXCLUDE in "${EXCLUDES[@]}"; do
        RSYNC_COMMAND+=("--exclude=$EXCLUDE")
    done

    "${RSYNC_COMMAND[@]}" live-data/bakedSite/ dist/

    # copy over Pages Functions as-is
    rsync -havzq --delete owid-grapher/functions dist/
    rsync -havzq owid-grapher/wrangler.toml dist/

    # we need node_modules for Pages Functions
    rm -rf dist/node_modules
    cp -rL owid-grapher/node_modules dist/ # the `L` flag copies over symlinked files, too, which we need for @ourworldindata/utils etc.

    cp owid-grapher/_routes.json dist/_routes.json
}

bake_site() {
    echo '--- Baking site to ~/live-data/bakedSite'

    (
        cd owid-grapher
        yarn install
        mkdir -p /home/owid/live-data/bakedSite/grapher
        yarn buildLocalBake $BAKED_BASE_URL /home/owid/live-data/bakedSite
    )
}

bake_gdoc_posts() {
    local slugs="$1"
    echo "--- Baking GDoc posts ${slugs}"
    (
        cd owid-grapher
        yarn bakeGdocPosts --slugs ${slugs}
    )
}

deploy_content
