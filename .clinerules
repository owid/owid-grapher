# Bash commands

- yarn buildLerna: Build the packages (types and utils, core table, the grapher data viz component and the data explorer)
- yarn buildTsc: Build the typescript code for the rest of the codebase (the site, admin UI etc)
- yarn typecheck: runs the typescript typechecker across all files (both frontend code in lerna managed packages and the rest of the site)
- yarn testLint: run eslint
- yarn test: run vitest
- yarn testPrettierAll: run prettier
- yarn fixPrettierAll: attempt to fix prettier issues

# Codebase overview

This is a sort of monorepo for the Our World In Data website, including our custom data viz react component, Grapher. The codebase is in typescript, uses React 17 and Node 22.

Some key directories, going roughly along the dependency chain from the most standalone pieces to the one with the most dependencies:

- ./packages/types - shared type definitions
- ./packages/utils - utility functions
- ./packages/core-table - our custom dataframe classes used by Grapher
- ./packages/components - shared React components
- ./packages/grapher - our data viz component. Written using MobX 5 for state management
- ./packages/explorer - our data explorer that wraps grapher and adds additional dropdowns to explore more complex datasets
- ./db - code to access our MySQL 8 database as well as a substantial amount of business logic around reading ArchieML written in Google Docs
- ./site - code for our website (React rendering ArchieML). This part of the codebase does not use MobX but instead uses React hooks
- ./baker - code that "bakes" our website by rendering React to static HTML
- ./adminSiteServer - internal API for our admin
- ./adminSiteClient - client UI of the admin
- ./devTools - various utilities
- ./functions - CloudFlare Functions. Most of our website is static but all our charts under https://ourworldindata.org/grapher/* are behind CF functions. These handle dynamic thumbnail generation, data downloads for end users etc.

You can use a browser to interact with the admin UI at http://localhost:3030/admin/ . When you access this page for the first time, you'll be asked for a username and password. Both is pre-filled, you only need to click the login button and will then be redirected to the page you were trying to access.

Usually the dev server is already running in another terminal, so you don't need to run `yarn dev` or similar before you can use the browser.

## Git commits

When you write commit messages, use the following emoji as prefixes:
emoji new type when to use it
🎉 :tada: new feature for the user
🐛 :bug: bug fix for the user
✨ :sparkles: visible improvement over a current implementation without adding a new feature or fixing a bug
🔨 :hammer: a code change that neither fixes a bug nor adds a feature for the user
📜 :scroll: changes to the documentation
✅ :white_check_mark: adding missing tests, refactoring tests, etc. No production code change
🐝 :honeybee: upgrading dependencies, tooling, etc. No production code change
💄 :lipstick: formatting, missing semi colons, etc. No production code change
🚧 :construction: Work in progress - intermediate commits that will be explained later on
📊 :bar_chart: Work on data updates (useful in etl repo)
